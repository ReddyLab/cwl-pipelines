#!/usr/bin/env cwl-runner
class: Workflow
cwlVersion: v1.0
doc: 'STARR-seq 03 mapping - reads: {{read_type|upper}}'
requirements:
 - class: ScatterFeatureRequirement
 - class: SubworkflowFeatureRequirement
 - class: StepInputExpressionRequirement
 - class: InlineJavascriptRequirement
inputs:
{% if read_type == "pe" %}
   input_fastq_read1_files:
     doc: Input fastq paired-end read 1 files
     type: File[]
   input_fastq_read2_files:
     doc: Input fastq paired-end read 2 files
     type: File[]
{% if umis %}
   input_fastq_umi_files:
     doc: Input fastq with UMIs files
     type: File[]
   fgbio_jar_path:
     default: /opt/fgbio.jar
     doc: fgbio Java jar file
     type: string
{% endif %}
{% else %}
   input_fastq_files:
     doc: Input fastq files
     type: File[]
{% endif %}
   genome_sizes_file:
     doc: Genome sizes tab-delimited file (used in samtools)
     type: File
   regions_bed_file:
     doc: Regions bed file used to filter-in reads (used in samtools)
     type: File
   picard_jar_path:
     default: /usr/picard/picard.jar
     doc: Picard Java jar file
     type: string
   picard_java_opts:
     doc: JVM arguments should be a quoted, space separated list (e.g. "-Xms128m -Xmx512m")
     type: string?
   ENCODE_blacklist_bedfile:
     doc: Bedfile containing ENCODE consensus blacklist regions to be excluded.
     type: File
   genome_ref_first_index_file:
     doc: Bowtie first index files for reference genome (e.g. *1.bt2). The rest of the files should be in the same folder.
     type: File
     secondaryFiles:
       - ^^.2.bt2
       - ^^.3.bt2
       - ^^.4.bt2
       - ^^.rev.1.bt2
       - ^^.rev.2.bt2
   nthreads:
     default: 1
     type: int
steps:
   basename:
     run: ../utils/basename.cwl
     scatter: file_path
     in:
       file_path:
         source: input_fastq{% if read_type == "pe" %}_read1{% endif %}_files
         valueFrom: $(self.basename)
       sep:
{% if read_type == 'pe' %}
         valueFrom: '[\._]R1'
{% else %}
         valueFrom: '(\.fastq.gz|\.fastq)'
{% endif %}
       do_not_escape_sep:
         valueFrom: ${return true}
     out:
     - basename
   extract_basename_1:
     run: ../utils/extract-basename.cwl
     in:
       input_file: input_fastq{% if read_type == "pe" %}_read1{% endif %}_files
     scatter: input_file
     out:
     - output_basename
   extract_basename_2:
     run: ../utils/remove-extension.cwl
     in:
       file_path: extract_basename_1/output_basename
     scatter: file_path
     out:
     - output_path
   bowtie2:
     run: ../map/bowtie2.cwl
     scatterMethod: dotproduct
     scatter:
{% if read_type == "pe" %}
     - input_fastq_read1_file
     - input_fastq_read2_file
{% else %}
     - input_fastq_file
{% endif %}
     - ungz
     - output_filename
     in:
{% if read_type == "pe" %}
       input_fastq_read1_file: input_fastq_read1_files
       input_fastq_read2_file: input_fastq_read2_files
{% else %}
       input_fastq_read1_file: input_fastq_files
{% endif %}
       ungz:
         source: basename/basename
         valueFrom: ${return self + ".unmmaped.fastq.gz"}
       output_filename: basename/basename
       sensitive:
         valueFrom: ${return true}
       v:
         valueFrom: ${return 2}
       X:
         valueFrom: ${return 2000}
       genome_ref_first_index_file: genome_ref_first_index_file
       nthreads: nthreads
     out:
     - outfile
     - output_bowtie_log
     - output_unmapped_reads
   sort_bams:
     run: ../map/samtools-sort.cwl
     scatter:
     - input_file
     in:
       nthreads: nthreads
       input_file: bowtie2/outfile
     out:
     - sorted_file
   index_bams:
     run: ../map/samtools-index.cwl
     scatter:
     - input_file
     in:
       input_file: sort_bams/sorted_file
     out:
     - indexed_file
{#   chrom_sizes_to_bed:#}
{#     run: ../utils/chrom-sizes-to-bed.cwl#}
{#     in:#}
{#       chrom_sizes: genome_sizes_file#}
{#     out:#}
{#     - bed#}
   filter_quality_alignments:
     run: ../map/samtools-view.cwl
     scatter:
     - input_file
     in:
       input_file: bowtie2/outfile
       nthreads: nthreads
       b:
         valueFrom: ${return true}
       u:
         valueFrom: ${return true}
       header:
         valueFrom: ${return true}
       S:
         valueFrom: ${return true}
       f:
         valueFrom: ${return 3}
       q:
         valueFrom: ${return 10}
       L: regions_bed_file
     out:
     - outfile
   sort_bams_by_tag_name:
     run: ../map/samtools-sort.cwl
     scatter:
     - input_file
     in:
       nthreads: nthreads
       n:
         valueFrom: ${return true}
       suffix:
         valueFrom: .f3q10.nsorted_bam
       input_file: filter_quality_alignments/outfile
     out:
     - sorted_file
   remove_encode_blacklist:
     run: ../map/bedtools-pairtobed.cwl
     scatterMethod: dotproduct
     scatter:
     - abam
     in:
       abam: sort_bams_by_tag_name/sorted_file
       bFile: ENCODE_blacklist_bedfile
       type:
         valueFrom: neither
     out:
     - filtered
   sort_masked_bams:
     run: ../map/samtools-sort.cwl
     scatter:
     - input_file
     in:
       nthreads: nthreads
       input_file: remove_encode_blacklist/filtered
     out:
     - sorted_file
   index_masked_bams:
     run: ../map/samtools-index.cwl
     scatter:
     - input_file
     in:
       input_file: sort_masked_bams/sorted_file
     out:
     - indexed_file
   bam_to_bepe:
     run: ../map/bedtools-bamtobed.cwl
     scatterMethod: dotproduct
     scatter:
     - bam
     in:
       bam: sort_bams_by_tag_name/sorted_file
       bedpe:
         valueFrom: ${return true}
     out:
     - output_bedfile
   cut_to_bepe:
     run: ../utils/cut.cwl
     scatterMethod: dotproduct
     scatter:
     - input_file
     in:
       input_file: bam_to_bepe/output_bedfile
       suffix:
         valueFrom: .fragments.txt
       columns:
         valueFrom: 1,2,6
     out:
     - output_file

   sort_to_bepe:
     run: ../utils/sort.cwl
     scatterMethod: dotproduct
     scatter:
     - input_file
     in:
       input_file: cut_to_bepe/output_file
       suffix:
         valueFrom: .bedpe
       k:
         valueFrom: $(["1,1", "2,2g"])
     out:
     - outfile
{#TODO: use the script for bowtie2 log written for CUT-and-RUN#}
{#   mapped_reads_count:#}
{#     run: ../map/bowtie-log-read-count.cwl#}
{#     scatter: bowtie_log#}
{#     in:#}
{#       bowtie_log: bowtie-{{ read_type }}/output_bowtie_log#}
{#     out:#}
{#     - output#}
{%  if umis %}
   annotate_bams_with_umis:
     run: ../map/fgbio-AnnotateBamWithUmis.cwl
     scatterMethod: dotproduct
     scatter:
     - input
     - fastq
     in:
       java_opts: picard_java_opts
       fgbio_jar_path: fgbio_jar_path
       input: index_masked_bams/indexed_file
       fastq: input_fastq_umi_files
     out:
     - output
{% endif %}
   mark_duplicates:
     run: ../map/picard-MarkDuplicates.cwl
     scatterMethod: dotproduct
     scatter:
     - input_file
     in:
       java_opts: picard_java_opts
       picard_jar_path: picard_jar_path
       input_file: {% if umis %}annotate_bams_with_umis/output{% else %}index_masked_bams/indexed_file{% endif %}
{% if umis %}
       barcode_tag:
         valueFrom: RX
{% endif %}
       output_filename:
         valueFrom: $(inputs.input_file.nameroot + ".dups_marked")
       output_suffix:
         valueFrom: bam
     out:
     - output_metrics_file
     - output_dedup_bam_file
   index_dups_marked_bams:
     run: ../map/samtools-index.cwl
     scatter:
     - input_file
     in:
       input_file: mark_duplicates/output_dedup_bam_file
     out:
     - indexed_file

   remove_duplicates:
     run: ../map/samtools-view.cwl
     scatter:
     - input_file
     in:
       input_file: index_dups_marked_bams/indexed_file
       F:
         valueFrom: ${return 1024}
       suffix:
         valueFrom: .dedup.bam
       b:
         valueFrom: ${return true}
       outfile_name:
         valueFrom: ${return inputs.input_file.basename.replace('dups_marked', 'dedup')}
     out:
     - outfile
   sort_dedup_bams:
     run: ../map/samtools-sort.cwl
     scatter:
     - input_file
     in:
       nthreads: nthreads
       input_file: remove_duplicates/outfile
     out:
     - sorted_file
   index_dedup_bams:
     run: ../map/samtools-index.cwl
     scatter:
     - input_file
     in:
       input_file: sort_dedup_bams/sorted_file
     out:
     - indexed_file


{#   filtered2sorted:#}
{#     run: ../map/samtools-sort.cwl#}
{#     in:#}
{#       nthreads: nthreads#}
{#       input_file: filter-unmapped/filtered_file#}
{#     scatter:#}
{#     - input_file#}
{#     out:#}
{#     - sorted_file#}
   preseq-c-curve:
     run: ../map/preseq-c_curve.cwl
     scatterMethod: dotproduct
     scatter:
     - input_sorted_file
     in:
       input_sorted_file: index_masked_bams/indexed_file
       output_file_basename:
         valueFrom: $(inputs.input_sorted_file.nameroot + ".preseq_ccurve.txt")
{% if read_type == 'pe' %}
       pe:
         valueFrom: ${return true}
{% endif %}
     out:
     - output_file
{#   preseq-lc-extrap:#}
{#     run: ../map/preseq-lc_extrap.cwl#}
{#     scatter:#}
{#     - input_sorted_file#}
{#     scatterMethod: dotproduct#}
{#     in:#}
{#       input_sorted_file: index_bams/indexed_file#}
{#       output_file_basename:#}
{#         valueFrom: $(inputs.input_sorted_file.nameroot)#}
{#       s:#}
{#         valueFrom: ${return 100000}#}
{#       D:#}
{#         valueFrom: ${return true}#}
{#{% if read_type == 'pe' %}#}
{#       pe:#}
{#         valueFrom: ${return true}#}
{#{% endif %}#}
{#     out:#}
{#     - output_file#}
{#   execute_pcr_bottleneck_coef:#}
{#     in:#}
{#       input_bam_files: filtered2sorted/sorted_file#}
{#       genome_sizes: genome_sizes_file#}
{#       input_output_filenames: basename/basename#}
{#     run: ../map/pcr-bottleneck-coef.cwl#}
{#     out:#}
{#     - pbc_file#}
{##}
{#   remove_encode_blacklist:#}
{#     run: ../map/bedtools-intersect.cwl#}
{#     scatterMethod: dotproduct#}
{#     scatter:#}
{#     - a#}
{#     - output_basename_file#}
{#     in:#}
{#       a: filtered2sorted/sorted_file#}
{#       b: ENCODE_blacklist_bedfile#}
{#       output_basename_file: basename/basename#}
{#       v:#}
{#         valueFrom: ${return true}#}
{#     out:#}
{#     - file_wo_blacklist_regions#}
{##}
{#   sort_masked_bams:#}
{#     run: ../map/samtools-sort.cwl#}
{#     scatter:#}
{#     - input_file#}
{#     in:#}
{#       nthreads: nthreads#}
{#       input_file: remove_encode_blacklist/file_wo_blacklist_regions#}
{#     out:#}
{#     - sorted_file#}
{#   index_masked_bams:#}
{#     run: ../map/samtools-index.cwl#}
{#     scatter:#}
{#     - input_file#}
{#     in:#}
{#       input_file: sort_masked_bams/sorted_file#}
{#     out:#}
{#     - indexed_file#}
{##}
{#   masked_file_basename:#}
{#     run: ../utils/extract-basename.cwl#}
{#     scatter: input_file#}
{#     in:#}
{#       input_file: remove_encode_blacklist/file_wo_blacklist_regions#}
{#     out:#}
{#     - output_basename#}
{##}
{#   mark_duplicates:#}
{#     run: ../map/picard-MarkDuplicates.cwl#}
{#     scatterMethod: dotproduct#}
{#     scatter:#}
{#     - input_file#}
{#     - output_filename#}
{#     in:#}
{#       java_opts: picard_java_opts#}
{#       picard_jar_path: picard_jar_path#}
{#       output_filename: masked_file_basename/output_basename#}
{#       input_file: index_masked_bams/indexed_file#}
{#       output_suffix:#}
{#         valueFrom: bam#}
{#        remove_duplicates:#}
{#          valueFrom: ${return true}#}
{#     out:#}
{#     - output_metrics_file#}
{#     - output_dedup_bam_file#}
{#   sort_dups_marked_bams:#}
{#     run: ../map/samtools-sort.cwl#}
{#     scatter:#}
{#     - input_file#}
{#     in:#}
{#       nthreads: nthreads#}
{#       input_file: mark_duplicates/output_dedup_bam_file#}
{#       suffix:#}
{#         valueFrom: .dups_marked.bam#}
{#     out:#}
{#     - sorted_file#}
{#   index_dups_marked_bams:#}
{#     run: ../map/samtools-index.cwl#}
{#     scatter:#}
{#     - input_file#}
{#     in:#}
{#       input_file: sort_dups_marked_bams/sorted_file#}
{#     out:#}
{#     - indexed_file#}
{#   remove_duplicates:#}
{#     run: ../map/samtools-view.cwl#}
{#     scatter:#}
{#     - input_file#}
{#     in:#}
{#       input_file: index_dups_marked_bams/indexed_file#}
{#       F:#}
{#         valueFrom: ${return 1024}#}
{#       suffix:#}
{#         valueFrom: .dedup.bam#}
{#       b:#}
{#         valueFrom: ${return true}#}
{#       outfile_name:#}
{#         valueFrom: ${return inputs.input_file.basename.replace('dups_marked', 'dedup')}#}
{#     out:#}
{#     - outfile#}
{#   sort_dedup_bams:#}
{#     run: ../map/samtools-sort.cwl#}
{#     scatter:#}
{#     - input_file#}
{#     in:#}
{#       nthreads: nthreads#}
{#       input_file: remove_duplicates/outfile#}
{#     out:#}
{#     - sorted_file#}
{#   index_dedup_bams:#}
{#     run: ../map/samtools-index.cwl#}
{#     scatter:#}
{#     - input_file#}
{#     in:#}
{#       input_file: sort_dedup_bams/sorted_file#}
{#     out:#}
{#     - indexed_file#}







{#   percent_uniq_reads:#}
{#     run: ../map/preseq-percent-uniq-reads.cwl#}
{#     scatter: preseq_c_curve_outfile#}
{#     in:#}
{#       preseq_c_curve_outfile: preseq-c-curve/output_file#}
{#     out:#}
{#     - output#}
{#   mapped_filtered_reads_count:#}
{#     run: ../peak_calling/samtools-extract-number-mapped-reads.cwl#}
{#     scatter: input_bam_file#}
{#     in:#}
{#       output_suffix:#}
{#         valueFrom: .mapped_and_filtered.read_count.txt#}
{#       input_bam_file: sort_dedup_bams/sorted_file#}
{#     out:#}
{#     - output_read_count#}
outputs:
{#   output_pbc_files:#}
{#     doc: PCR Bottleneck Coeficient files.#}
{#     type: File[]#}
{#     outputSource: execute_pcr_bottleneck_coef/pbc_file#}
{#   output_read_count_mapped:#}
{#     doc: Read counts of the mapped BAM files#}
{#     type: File[]#}
{#     outputSource: mapped_reads_count/output#}
{#   output_data_sorted_dedup_bam_files:#}
{#     doc: BAM files without duplicate reads, sorted and indexed.#}
{#     type: File[]#}
{#     outputSource: index_dedup_bams/indexed_file#}
{#   output_data_sorted_dups_marked_bam_files:#}
{#     doc: BAM files with duplicate reads flagged using picard MarkDuplicates, sorted and indexed.#}
{#     type: File[]#}
{#     outputSource: index_dups_marked_bams/indexed_file#}
   output_picard_mark_duplicates_files:
     doc: Picard MarkDuplicates metrics files.
     type: File[]
     outputSource: mark_duplicates/output_metrics_file
{#   output_read_count_mapped_filtered:#}
{#     doc: Read counts of the mapped and filtered BAM files#}
{#     type: File[]#}
{#     outputSource: mapped_filtered_reads_count/output_read_count#}
{#   output_percentage_uniq_reads:#}
{#     doc: Percentage of uniq reads from preseq c_curve output#}
{#     type: File[]#}
{#     outputSource: percent_uniq_reads/output#}
   output_bowtie_log:
     doc: Bowtie log file.
     type: File[]
     outputSource: bowtie2/output_bowtie_log
   output_data_bam_files:
     doc: BAM files with aligned reads.
     type: File[]
     outputSource:   index_dups_marked_bams/indexed_file
   output_data_dedup_bam_files:
     doc: Dedup BAM files with aligned reads.
     type: File[]
     outputSource: index_dedup_bams/indexed_file
{#     outputSource: index_masked_bams/indexed_file#}
{#     outputSource: bowtie2/outfile#}
   output_data_unmapped_fastq_files:
     doc: FASTQ gzipped files with unmapped reads.
     type: File[]
     outputSource: bowtie2/output_unmapped_reads
   output_templates_files:
     doc: Tags/templates coordinates, sorted by chromosome and position (sort -k1,1 -k2,2g).
     type: File[]
     outputSource: sort_to_bepe/outfile
   output_preseq_c_curve_files:
     doc: Preseq c_curve output files.
     type: File[]
     outputSource: preseq-c-curve/output_file
{#   output_preseq_lc_extrap_files:#}
{#     doc: Preseq lc_extrap output files.#}
{#     type: File[]#}
{#     outputSource: preseq-lc-extrap/output_file#}
